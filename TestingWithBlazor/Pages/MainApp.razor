@page "/MainApp"
@using System.Globalization
@inject IMapApi mapApi
@inject IGPSService GpsService
@inject IPackageHandler pachandler
@inject NavigationManager navman
@inject IAppSettingsConfig appsettings

@if(LoadingDistance){
    <h3>loading...</h3>
}

@if(Packages == null || Packages == new List<Package>() || Packages.Count() == 0){
    <button @onclick="OpenFileManager" class="btn btn-outline-primary">Open File</button>
    <button @onclick="WriteDefaultInfo" class="btn btn-outline-secondary" >Write default data to a location</button>
}
else{
    <button @onclick="AddPackageHref" class="btn btn-outline-info">Add Package</button>
}

<ErrorMessageHandler @ref=handler ErrorMessage=@errorMessage/>

@if (Packages.Count() != 0 && Distance != 0)
{
    <div>
        <h2> Distance to next position in miles</h2>
        <h3>@Distance.ToString("N", setPrecision)</h3>
    </div>
}

@if(!LoadingDistance && Distance != 0){
    <div>
        <h8><a target="_balank" href="@googleMapsURL">Directions</a></h8>
    </div>
}

@if (Packages != null && Packages.Count() != 0)
{
    <ListViewer TItem="Package" Items="@Packages" >
        <Fragment>
            <PackageViewer context=@context/>
        </Fragment>
    </ListViewer> 
}


@code {
    string textFilter = "Text Files (*txt) | *txt";
    string googleMapsURL;
    ErrorMessageHandler handler;

    NumberFormatInfo setPrecision = new NumberFormatInfo();
    string errorMessage = "";
    bool LoadingDistance = false;
    bool AlreadyInit;
    double Distance = 0;

    const double LAT_TO_MILES = 69;

    List<Package> Packages{
        get{
            return pachandler.GetPackages();
        }
        set {
            pachandler.SetPackages(value);
        }
    }

    Coordinate? NextPosition;

    protected override async Task OnInitializedAsync()
    {
        setPrecision.NumberDecimalDigits = 2;
        await base.OnInitializedAsync();
        AlreadyInit = Packages.Count() != 0;
        Test(await GpsService.GetCurrentCoordinates());
        if(!AlreadyInit){
            GpsService.OnCoordinateChage += Test;
            return;
        }
        await SortAndUpdateLocation();
    }

    private async Task OpenFileManager()
    {
        var fileLoc = Alerts_Api.FileHandlingInterface.AskUserForFileLocWithPrompt(textFilter);
        if (string.IsNullOrEmpty(fileLoc))
        {
            return;
        }
        try
        {
            Packages = Tools.FileHandler.ReadFromFile(fileLoc).Packages;
        }
        catch
        {
            errorMessage = "File formated incorrectly";
            handler.ShowMessage();
            return;
        }
        await SortAndUpdateLocation();
    }

    private void WriteDefaultInfo()
    {
        var fileLoc = Alerts_Api.FileHandlingInterface.AskUserForNewFileLocWithPrompt("Default", textFilter);

        Tools.FileHandler.WriteToFile(fileLoc, new JsonSerializedDataObject()
                {
                    Packages = new List<Package>()
                    {
                        new Package()
                    {
                        Address = new Address()
                        {
                            City = "Farmington Hills",
                            Country = "US",
                            State = "MI",
                            Street = "30382 Nantucet Dr",
                            Zipcode = 48336
                        },
                        TrackingID = 0
                    },
                        new Package()
                    {
                        Address = new Address()
                        {
                            City = "Farmington Hills",
                            Country = "US",
                            State = "MI",
                            Street = "30332 Tuck Rd",
                            Zipcode = 48336
                        },
                        TrackingID = 1
                    },
                        new Package()
                    {
                        Address = new Address()
                        {
                            City = "SouthField",
                            Country = "US",
                            State = "MI",
                            Street = "21000 W 10 Mile Rd",
                            Zipcode = 48075
                        },
                        TrackingID = 2
                    }
                    }
                });
    }

    private void Test(Coordinate newCoords)
    {
        if (NextPosition == null)
            return;
        Distance = Tools.Comp.GetDistanceFromCoords(newCoords, NextPosition) * LAT_TO_MILES;
        if(Tools.Comp.IsWithin(NextPosition, newCoords, appsettings.GetAppSettings().GPSSettings.ErrorBounds)){
            InvokeAsync(Arrived);
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task Arrived(){
        var tempPackages = Packages;
        tempPackages.RemoveAt(0);
        NextPosition = null;
        await SortAndUpdateLocation();
    }

    private void AddPackageHref(){
        navman.NavigateTo("/AddPackage");
    }

    private async Task SortAndUpdateLocation(){
        LoadingDistance = true;
        await InvokeAsync(StateHasChanged);
        var tempPackages = Packages;
        Packages = await Tools.Sorter.SortAsync(tempPackages, async (Package pack) => {
            pack.DistanceFromPoint = await mapApi.GetDistanceAsync(pack.Address, await GpsService.GetCurrentCoordinates());
            return pack;
        });
        googleMapsURL = mapApi.GenerateGoogleMapsUrl(await mapApi.GetAddressFromCoordinate(await GpsService.GetCurrentCoordinates()), Packages[0].Address);

        if (NextPosition == null)
        {
            NextPosition = await mapApi.GetAddressInPointFormAsync((Packages[0]).Address);
        }

        Test(await GpsService.GetCurrentCoordinates());

        LoadingDistance = false;
        await InvokeAsync(StateHasChanged);
    }
}
