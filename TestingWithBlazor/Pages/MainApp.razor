@page "/MainApp"
@using System.Globalization
@inject IMapApi mapApi
@inject IGPSService GpsService
@inject IPackageHandler pachandler
@inject NavigationManager navman
@inject IAppSettingsConfig appsettings
@inject IJSRuntime js

@if(Packages == null || Packages == new List<Package>() || Packages.Count() == 0){
    <div class="initlize-container">
        <div class="main-content">
            <h3>Welcome to the Main App</h3>
            <br />
            <h8>On this page you are able to load information from a file, and start your journey.</h8>
            <br/>
            <h8>If you reload the page/restart the app all the information about your route will be lost</h8>
        </div>
        <div class="button-containers">
            <button @onclick="OpenFileManager" class="btn btn-outline-primary">Open File</button>
            <button @onclick="WriteDefaultInfo" class="btn btn-outline-secondary">Write default data to a location</button>
        </div>
    </div>
    
}

@if(LoadingDistance){
    <Loader/>
}

<ErrorMessageHandler @ref=handler ErrorMessage=@errorMessage/>
@if(Packages != null && Packages != new List<Package>() && Packages.Count() != 0){
    <div class="content-container">
        <div class="header-content">
            <h2>Current Package</h2>
        </div>
        <div class="main-package-container">
            <MainPackageViewer context="@(Packages[0])"/>
        </div>
        
        <div class="package-section">
             @if (Packages != null && Packages.Count() != 0)
             {
                 <ListViewer TItem="Package" Items="@Packages" MaxCount="3" Skip="1" >
                     <Fragment>
                         <div style="width:100%;">
                              <CompactPackageViewer context=@context/>
                         </div>
                     </Fragment>
                     <EndFragment>
                         <CenterHorizontally>
                            <button class="btn btn-outline-info"><a href="/ViewDetailedPackages">View All Packages</a></button>
                         </CenterHorizontally>
                     </EndFragment>
                 </ListViewer> 
             }
        </div>
    </div>

    <div>
        <button class="btn btn-outline-info"><a href="/SaveData">Save data</a></button>
    </div>
}



@code {
    [CascadingParameter] public MainLayout MainLayout { get; set; }
    string textFilter = "Text Files (*.txt) | *.txt";
    ErrorMessageHandler handler;

    NumberFormatInfo setPrecision = new NumberFormatInfo();
    string errorMessage = "";
    bool LoadingDistance = false;
    bool AlreadyInit;
    double Distance = 0;

    const double LAT_TO_MILES = 69;

    List<Package> Packages{
        get{
            return pachandler.Packages;
        }
        set {
            pachandler.Packages = value;
        }
    }

    Coordinate? NextPosition;



    protected override async Task OnInitializedAsync()
    {
        setPrecision.NumberDecimalDigits = 2;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender){
            AlreadyInit = Packages.Count() != 0;
            CheckIfWithin(await GpsService.GetCurrentCoordinates());
            if (!AlreadyInit)
            {
                GpsService.OnCoordinateChage += CheckIfWithin;
                return;
            }
            await SortAndUpdateLocation();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    private async Task OpenFileManager()
    {
        var fileLoc = Alerts_Api.FileHandlingInterface.AskUserForFileLocWithPrompt(textFilter);
        if (string.IsNullOrWhiteSpace(fileLoc))
        {
            return;
        }
        try
        {
            Packages = Tools.FileHandler.ReadFromFile(fileLoc).Packages;
        }
        catch
        {
            errorMessage = "File formated incorrectly";
            handler.ShowMessage();
            return;
        }
        try{
            await MainLayout.ReloadPage();
        }
        catch
        {
            errorMessage = "Unable to reload";
            handler.ShowMessage();
            return;
        }
        await SortAndUpdateLocation();
    }

    private void WriteDefaultInfo()
    {
        var fileLoc = Alerts_Api.FileHandlingInterface.AskUserForNewFileLocWithPrompt("Default", textFilter);
        if(string.IsNullOrWhiteSpace(fileLoc)){
            return;
        }
        Tools.FileHandler.WriteToFile(fileLoc, new JsonSerializedDataObject()
                {
                    Packages = new List<Package>()
                    {
                        new Package()
                    {
                        Address = new Address()
                        {
                            City = "Farmington Hills",
                            Country = "US",
                            State = "MI",
                            Street = "30382 Nantucet Dr",
                            Zipcode = 48336
                        },
                        TrackingID = 0,
                        Details = new PackageDetails(){
                            Weight = 5
                        }
                    },
                        new Package()
                    {
                        Address = new Address()
                        {
                            City = "Farmington Hills",
                            Country = "US",
                            State = "MI",
                            Street = "30332 Tuck Rd",
                            Zipcode = 48336
                        },
                        TrackingID = 1,
                        Details = new PackageDetails(){
                            Weight = 5
                        }
                    },
                        new Package()
                    {
                        Address = new Address()
                        {
                            City = "SouthField",
                            Country = "US",
                            State = "MI",
                            Street = "21000 W 10 Mile Rd",
                            Zipcode = 48075
                        },
                        TrackingID = 2,
                        Details = new PackageDetails(){
                            Weight = 5
                        }
                    },
                    new Package()
                    {
                        Address = new Address()
                        {
                            City = "SouthField",
                            Country = "US",
                            State = "MI",
                            Street = "22000 W 10 Mile Rd",
                            Zipcode = 48075
                        },
                        TrackingID = 4,
                        Details = new PackageDetails(){
                            Weight = 5
                        }
                    },
                    new Package()
                    {
                        Address = new Address()
                        {
                            City = "Farmingtion",
                            Country = "US",
                            State = "MI",
                            Street = "22128 Farmington Rd",
                            Zipcode = 48336
                        },
                        TrackingID = 3,
                        Details = new PackageDetails(){
                            Weight = 5
                        }
                    }
                    }
                });
    }

    private void CheckIfWithin(Coordinate newCoords)
    {
        if (NextPosition == null)
            return;
        Distance = Tools.Comp.GetDistanceFromCoords(newCoords, NextPosition) * LAT_TO_MILES;
        if(Tools.Comp.IsWithin(NextPosition, newCoords, appsettings.GetAppSettings().GPSSettings.ErrorBounds)){
            InvokeAsync(Arrived);
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task Arrived(){
        var arrived = await js.InvokeAsync<bool>("confirm", "Have you arrived at your destination? (ok = yes, cancel = no)");
        if(!arrived){
            return;
        }
        Packages.RemoveAt(0);
        NextPosition = null;
        await SortAndUpdateLocation();
    }

    private void AddPackageHref(){
        navman.NavigateTo("/AddPackage");
    }

    private async Task SortAndUpdateLocation(){
        LoadingDistance = true;
        await InvokeAsync(StateHasChanged);
        var tempPackages = Packages;
        Packages = await Tools.Sorter.SortAsync(tempPackages, async (Package pack) => {
            pack.DistanceFromPoint = await mapApi.GetDistanceAsync(pack.Address, await GpsService.GetCurrentCoordinates());
            return pack;
        });

        if (NextPosition == null)
        {
            NextPosition = await mapApi.GetAddressInPointFormAsync((Packages[0]).Address);
        }

        CheckIfWithin(await GpsService.GetCurrentCoordinates());

        LoadingDistance = false;
        await InvokeAsync(StateHasChanged);
    }

    private void Delete(Package var)
    {
        Packages.Remove(var);
        InvokeAsync(StateHasChanged);
    }
}
