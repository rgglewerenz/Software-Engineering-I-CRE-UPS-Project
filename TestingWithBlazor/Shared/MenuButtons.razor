@inject IJSRuntime js
@if (is_electron)
{
	<div class="menu-container">
		<button @onclick=close class="btn btn-danger"><span class="oi oi-circle-x"></span></button>
		<button @onclick=maximize class="btn btn-secondary"><span class="oi @(is_fullScreen ? "oi-fullscreen-exit" : "oi-fullscreen-enter")"></span></button>
		<button @onclick=minimize class="btn btn-primary"><span class="oi oi-minus"></span></button>
	</div>
}


@code {
	bool is_electron = false;
	bool is_fullScreen = false;

	protected  override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	[JSInvokable]
	public async Task OnWindowChange(){
		is_fullScreen = await js.InvokeAsync<bool>("getIsFullScreen");
		await Task.Run(async () =>
		{
			is_electron = false;
			await InvokeAsync(StateHasChanged);
			is_electron = true;
			await InvokeAsync(StateHasChanged);
		});
	}



	protected override async Task OnAfterRenderAsync(bool first)
	{
		await base.OnAfterRenderAsync(first);
		if(first){
			if (await IsElectron())
			{
				is_electron = true;
				var lDotNetReference = DotNetObjectReference.Create(this);
				await js.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);
				await InvokeAsync(StateHasChanged);
				//await js.InvokeVoidAsync("alert", System.Reflection.Assembly.GetExecutingAssembly().GetName().Name);
				await js.InvokeVoidAsync("StartWatch");
			}
		}
		
	}

	private async Task minimize(){
		if (await IsElectron()){
			await js.InvokeVoidAsync("minimizeCurrentWindow");
		}
	}

	private async Task close()
	{

		if (await IsElectron())
		{
			await js.InvokeVoidAsync("closeCurrentWindow");
		}
	}

	private async Task maximize()
	{
		if (await IsElectron())
		{
			if (!await js.InvokeAsync<bool>("getIsFullScreen"))
			{
				await js.InvokeVoidAsync("maximizeCurrentWindow");
			}
			else{
				await js.InvokeVoidAsync("restoreCurrentWindow");
			}
			
		}
	}

	private async Task<bool> IsElectron(){
		return await js.InvokeAsync<bool>("isElectron");
	}
}
