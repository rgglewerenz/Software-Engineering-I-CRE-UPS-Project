@inject IJSRuntime js
@if (is_electron)
{
	<div class="menu-container">
		<button @onclick=close class="btn btn-danger"><span class="oi oi-circle-x"></span></button>
		<button @onclick=maximize class="btn btn-secondary"><span class="oi @(Startup.window_ref.IsMaximizedAsync().Result ? "oi-fullscreen-exit" : "oi-fullscreen-enter")"></span> </button>
		<button @onclick=minimize class="btn btn-primary"><span class="oi oi-minus"></span></button>
	</div>
}


@code {
	bool is_electron = false;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if(Startup.window_ref == null){
			return;
		}
		Startup.window_ref.OnUnmaximize += () =>
		{
			Task.Run(async () => {
				is_electron = false;
				await InvokeAsync(StateHasChanged);
				is_electron = true;
				await InvokeAsync(StateHasChanged);
			});
		};
		Startup.window_ref.OnMaximize += () =>
		{
			Task.Run(async () =>
			{
				is_electron = false;
				await InvokeAsync(StateHasChanged);
				is_electron = true;
				await InvokeAsync(StateHasChanged);
			});
		};
	}

	protected override async Task OnAfterRenderAsync(bool first)
	{
		await base.OnAfterRenderAsync(first);
		if(first){
			if (await IsElectron())
			{
				is_electron = true;
				await InvokeAsync(StateHasChanged);
				
			}
		}
	}

	private async Task minimize(){
		if (Startup.window_ref != null && await IsElectron()){
			Startup.window_ref.Minimize();
		}
	}

	private async Task close()
	{

		if (Startup.window_ref != null && await IsElectron())
		{
			Startup.window_ref.Close();
		}
	}

	private async Task maximize()
	{
		if (Startup.window_ref != null && await IsElectron())
		{
			if(!await Startup.window_ref.IsMaximizedAsync()){
				Startup.window_ref.Maximize();
			}
			else{
				Startup.window_ref.Restore();
			}
			
		}
	}

	private async Task<bool> IsElectron(){
		return await js.InvokeAsync<bool>("isElectron");
	}
}
